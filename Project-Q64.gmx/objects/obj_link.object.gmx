<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_link_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Physics variables
image_speed = .33;
sprite_index = spr_link_idle;

grav = 0.2;
horizontal_acc = 0.25;
horizontal_dec = 0.8;
CROUCH_DEC = .95;
horizontal_speed = 0;
horizontal_speed_carry = 0;
vertical_speed = 0;
jumps = 0;
jumps_max = 2;
dir = 1;
move = 0;
move_speed = 2;
jump_speed_normal = 4;
jump_speed_powerup = 10;
jump_speed = jump_speed_normal;
attack_state = false;
attack_delay = 0;
max_attack_delay = 60;
crouch_state = false;
key_down = 0;
if (global.checkpointR == room) {
    x = global.checkpointx;
    y = global.checkpointy;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats
globalvar player_hp;
player_hp = 100;

globalvar max_player_hp;
max_player_hp = 100;

globalvar player_level;
player_level = 1;

globalvar xp;
xp = 0;

globalvar max_xp;
max_xp = (30 + (player_level * 100) - 20);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the playe's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
key_right = keyboard_check(vk_right);
key_down = keyboard_check(vk_down);
key_attack = keyboard_check(ord("Z"));

camera_movement();

//React to input
move = key_left + key_right;
//horizontal_speed = move * move_speed;

if( !crouch_state &amp;&amp; !attack_state) {
    if( -key_left &amp;&amp; !key_attack ) {
        if( horizontal_speed &gt; -move_speed ) {
            horizontal_speed -= horizontal_acc;
        } 
    }
    
    if( key_right &amp;&amp; !key_attack ) {
        if( horizontal_speed &lt; move_speed ) {
            horizontal_speed += horizontal_acc;
        }
    }
}


if (!key_right &amp;&amp; !-key_left || attack_state) {
    if ( attack_state ){
        horizontal_speed = 0;
    } else if ( horizontal_speed != 0 ){
        horizontal_speed *= horizontal_dec;
    }
}


if (vertical_speed &lt; 10 ) {
    vertical_speed += grav;
}

if (place_meeting(x, y+1, obj_wall)) {
    vertical_speed = key_jump * -jump_speed;
}

//Horizontal collision 
if (place_meeting(x + horizontal_speed, y, obj_wall)) {
    while(!place_meeting(x+sign(horizontal_speed), y, obj_wall)) {
        x += sign(horizontal_speed);
    }
    horizontal_speed = 0;
}
x += horizontal_speed;

//Vertical collision 
if (place_meeting(x, y + vertical_speed, obj_wall)) {
    while(!place_meeting(x, y+sign(vertical_speed), obj_wall)) {
        y += sign(vertical_speed);
    }
    vertical_speed = 0;
}

y += vertical_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations
if !attack_state {
    if (move != 0) {
        image_xscale = move;
    }
    
    if (place_meeting( x, y+1, obj_wall ) ) {
        if (move!=0) {
            sprite_index = spr_link_run; 
            image_speed = .4;
        } else {
            sprite_index = spr_link_idle; image_speed = 0.5;
        }
    } else {
        if (vertical_speed &lt; 0) {
            sprite_index = spr_link_jump; 
        } else {
            sprite_index = spr_link_idle;
        }
    }
    
    //crouch animation
    if ( key_down &amp;&amp; vertical_speed == 0 ) {
        sprite_index = spr_link_crouch;
        crouch_state = true;
        horizontal_speed *= CROUCH_DEC;
    } else {
        crouch_state = false;
    }
    
    //crouch sword swing attack
    if ( 0 &gt;= attack_delay ) {
        if ( crouch_state == true &amp;&amp; key_attack ) {
            attack_state = true;
            attack_delay = max_attack_delay;
            audio_play_sound(snd_melee_swing_2, 1, false);
            horizontal_speed *= horizontal_dec;
            sprite_index = spr_link_crouch_attack;
            image_speed = .1;
            image_index = 0;
        }
    } else {
        attack_delay -= 1;
    }
    
    //sword swing attack
    if ( 0 &gt;= attack_delay ) {
        if ( key_attack &amp;&amp; !crouch_state) {
            attack_state = true;
            attack_delay = max_attack_delay;
            audio_play_sound(snd_melee_swing_0, 1, false);
            horizontal_speed *= horizontal_dec;
            sprite_index = spr_link_attack;
            image_speed = .1;
            image_index = 0;
            
            with instance_create(x, y, obj_sword_hit) {
                image_xscale = obj_link.image_xscale;
            }
        }
    } else {
        attack_delay -= 1;
    }
    
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///XP and Levels
if (xp &gt;= max_xp) {
    leftover_xp = xp - max_xp;
    player_level += 1;
    xp = leftover_xp;
    max_xp = (30 + (player_level*100) - 20);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set attack state
if attack_state {
    attack_state = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw Score
//draw_text( 10, 5, string(score) )
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///XP Bar and Health

var hp_x_start = 30;
var bar_width = 250;

var hp_y_start = 30;
var bar_height = 15;

var xp_y_start = 50;
var bar_width = 250;



//Health Bar
hp_color_left = make_color_rgb(124, 204, 98);
hp_color_right = make_color_rgb(109, 184, 84);
draw_rectangle_color( hp_x_start, hp_y_start, (hp_x_start+bar_width), (hp_y_start+bar_height), c_black, c_black, c_black, c_black, false );
draw_rectangle_color( hp_x_start, hp_y_start, hp_x_start+((player_hp/max_player_hp)*bar_width), (hp_y_start+bar_height), hp_color_left, hp_color_left, hp_color_right, hp_color_right, false );

draw_set_color(c_white);
draw_text(125, hp_y_start+1, string(player_hp) + "/" + string(max_player_hp) );


//XP Bar
xp_color_left = make_color_rgb(178, 98, 204);
xp_color_right = make_color_rgb(159, 84, 184);
draw_rectangle_color( hp_x_start, xp_y_start, (hp_x_start+bar_width), (xp_y_start+bar_height), c_black, c_black, c_black, c_black, false );
draw_rectangle_color( hp_x_start, xp_y_start, hp_x_start + ((xp/max_xp)*300), (xp_y_start+bar_height), xp_color_left, xp_color_left, xp_color_right, xp_color_right, false );
draw_text(125, xp_y_start+1, string(xp) + "/" + string(max_xp) );
draw_set_color(c_black);
draw_text(115, xp_y_start+bar_height+1, "Level: " + string(player_level));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
